#!/usr/bin/python3

##----------------------------------------------------------------------------
## Usage: (From same folder as this script)
##    ./deploy
##
## Create a zipfile that can be used for uploading to server, that requires
## minimal manual intervention
##
## Use that zipfile to populate local /var/www/html/m3/[date]/[time]
##----------------------------------------------------------------------------

import datetime
import os
import pathlib
import shutil
import subprocess
import sys
import tempfile

##----------------------------------------------------------------------------
## main()
##----------------------------------------------------------------------------
def main():
    M3_ROOT = '/var/www/html/m3'

    ##-------------------------------------------------------------------------
    ## All work is done in the 'out' folder generated by gulp
    ##-------------------------------------------------------------------------
    os.chdir('out')

    ##-------------------------------------------------------------------------
    ## Sanity checks
    ##-------------------------------------------------------------------------
    if not os.path.exists('debug'):
        print('Error: Missing debug folder.')
        sys.exit()

    if not os.path.exists('production'):
        print('Error: Missing production folder.')
        sys.exit()

    ##-------------------------------------------------------------------------
    ## Need to create folder name here so debug and production
    ## folders don't get created in separate [time] folders
    ##-------------------------------------------------------------------------
    now = datetime.datetime.today()
    dateFolder = now.strftime('%Y-%m-%d')
    timeFolder = now.strftime('%H:%M:%S')
    timeStampedFolder = M3_ROOT + '/' + dateFolder + '/' + timeFolder

    ##-------------------------------------------------------------------------
    ## Create destination folder with proper permissions
    ##-------------------------------------------------------------------------
    pathlib.Path(timeStampedFolder).mkdir(parents = True)
    pathlib.Path(M3_ROOT).chmod(0o755)
    pathlib.Path(M3_ROOT + '/' + dateFolder).chmod(0o755)
    pathlib.Path(timeStampedFolder).chmod(0o755)

    ##-------------------------------------------------------------------------
    ## Do it
    ##-------------------------------------------------------------------------
    print('Deploying to ' + timeStampedFolder)

    for folder in ['debug', 'production']:
        resultingFolderName = 'm3-new-' + folder
        resultingZipName = resultingFolderName + '.zip'

        createZipfile(folder, resultingFolderName, resultingZipName)
        deployLocally(timeStampedFolder, resultingZipName)

        ## Local webserver requires o=rwx on stats folder
        pathlib.Path(
            timeStampedFolder + '/' + resultingFolderName + '/stats'
        ).chmod(0o777)

##----------------------------------------------------------------------------
## createZipfile()
##      Create a zipfile for the specified folder. The folder must exist in the
##      current working directory.
##----------------------------------------------------------------------------
def createZipfile(sourceFolder, resultingFolderName, resultingZipName):
    ##-------------------------------------------------------------------------
    ## Copy to a working folder so we can fiddle with file permissions
    ##-------------------------------------------------------------------------
    workFolder = tempfile.mkdtemp()
    m3Temp = workFolder + '/' + resultingFolderName
    zipPath = workFolder + '/' + resultingZipName

    shutil.copytree(sourceFolder, m3Temp)

    ##--------------------------------------------------------------------------
    ## Massage the files so they're appropriate for public deployment. We need:
    ##    - a stats folder for the logger to write to
    ##    - m3.appcache renamed to something else so it can be activated
    ##      when we're ready (otherwise it's a pain for debugging)
    ##    - file permissions: u=rw, g=r, o=r
    ##    - folder permissions: u=rwx, g=rx, o=rx
    ##--------------------------------------------------------------------------
    pathlib.Path(m3Temp + '/stats').mkdir()
    pathlib.Path(m3Temp + '/m3.appcache').rename(m3Temp + '/RENAME-ME-m3.appcache')
    chmodFolder(m3Temp, 0o755, 0o644)

    ##--------------------------------------------------------------------------
    ## Create the zipfile
    ##      -q = quiet mode
    ##      -r = recursive
    ##--------------------------------------------------------------------------
    status = subprocess.check_call(
        ['zip', '-q', '-r', zipPath, resultingFolderName],
        cwd = workFolder
    )

    if status != 0:
        print('Error! zip exited with status ' + status)
        sys.exit()

    print('Created ' + resultingZipName)

    ##--------------------------------------------------------------------------
    ## Move to the current folder and delete temp folder
    ##--------------------------------------------------------------------------
    pathlib.Path(zipPath).rename(resultingZipName)
    shutil.rmtree(workFolder)

##----------------------------------------------------------------------------
## chmodFolder()
##      Set permissions on the specified folder and all children, recursively
##----------------------------------------------------------------------------
def chmodFolder(foldername, folderPerms, filePerms):
    pathlib.Path(foldername).chmod(folderPerms)

    for child in pathlib.Path(foldername).iterdir():
        if pathlib.Path(child).is_file():
            child.chmod(filePerms)

        elif pathlib.Path(child).is_dir():
            chmodFolder(str(child), folderPerms, filePerms)

        else:
            errorMsg = 'Weird. ' + str(child)
            errorMsg += ' is neither file nor directory'
            print(errorMsg)

##----------------------------------------------------------------------------
## deployLocally()
##      Deploy the specified zipfile to the specified folder.
##      It's up to the calling code to ensure destination folder exists and
##      has proper permissions.
##----------------------------------------------------------------------------
def deployLocally(destinationFolder, zipFile):

    ##------------------------------------------------------------------------
    ## -q = quiet
    ## -d = extract files into specified folder
    ##------------------------------------------------------------------------
    status = subprocess.check_call(
        ['unzip', '-q', '-d', destinationFolder, zipFile]
    )

    if status != 0:
        print('Error. unzip exited with status ' + status)
        system.exit()

##----------------------------------------------------------------------------
main()
